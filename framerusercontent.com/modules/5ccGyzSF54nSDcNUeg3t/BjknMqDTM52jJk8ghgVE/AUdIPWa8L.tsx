// Generated by Framer (74099f6)

import { addFonts, addPropertyControls, ControlType, cx, getLoadingLazyAtYPosition, Image, useActiveVariantCallback, useComponentViewport, useLocaleInfo, useVariantState, withCSS } from "framer";
import { LayoutGroup, motion, MotionConfigContext } from "framer-motion";
import * as React from "react";
import { useRef } from "react";

const cycleOrder = ["fg2Qm7JpU", "KTyV7Phkk"];

const serializationHash = "framer-hJ2mp"

const variantClassNames = {fg2Qm7JpU: "framer-v-12waq4g", KTyV7Phkk: "framer-v-hgdv54"};

function addPropertyOverrides(overrides, ...variants) {
const nextOverrides = {}
variants?.forEach(variant => variant && Object.assign(nextOverrides, overrides[variant]))
return nextOverrides
}

const transition1 = {bounce: 0.2, delay: 0, duration: 0.4, type: "spring"}

const toResponsiveImage = (value) => {
    if (typeof value === "object" && value !== null && typeof value.src === "string") {
        return value;
    };
    return typeof value === "string" ? {src: value} : undefined;
};


const Transition = ({value, children}) => {
const config = React.useContext(MotionConfigContext)
const transition = value ?? config.transition
const contextValue = React.useMemo(() => ({ ...config, transition }), [JSON.stringify(transition)])
return <MotionConfigContext.Provider value={contextValue}>{children}</MotionConfigContext.Provider>
}

const Variants = motion.create(React.Fragment)

const humanReadableVariantMap = {L: "fg2Qm7JpU", S: "KTyV7Phkk"}

const getProps = ({click, height, id, image, width, ...props}) => { return {...props, f8fgdu9JL: click ?? props.f8fgdu9JL, Ln8d5mN1s: image ?? props.Ln8d5mN1s ?? {pixelHeight: 2560, pixelWidth: 2560, src: "https://framerusercontent.com/images/nvwMzGj6it9ES02wDvpqv67cBa0.jpg?scale-down-to=512&width=2560&height=2560", srcSet: "https://framerusercontent.com/images/nvwMzGj6it9ES02wDvpqv67cBa0.jpg?scale-down-to=512&width=2560&height=2560 512w,https://framerusercontent.com/images/nvwMzGj6it9ES02wDvpqv67cBa0.jpg?scale-down-to=1024&width=2560&height=2560 1024w,https://framerusercontent.com/images/nvwMzGj6it9ES02wDvpqv67cBa0.jpg?scale-down-to=2048&width=2560&height=2560 2048w,https://framerusercontent.com/images/nvwMzGj6it9ES02wDvpqv67cBa0.jpg?width=2560&height=2560 2560w"}, variant: humanReadableVariantMap[props.variant] ?? props.variant ?? "fg2Qm7JpU"} }

const createLayoutDependency = (props, variants) => {if (props.layoutDependency) return variants.join('-') + props.layoutDependency
return variants.join('-')}

export interface Props extends React.HTMLAttributes<HTMLDivElement> { style?: Record<string, unknown>;className?: string;layoutId?: string | number;variant?: keyof typeof humanReadableVariantMap;image?: {src: string; srcSet?: string; alt?: string};click?: any; }

const Component = React.forwardRef<HTMLDivElement, Props>(function(props, ref) {

const fallbackRef = useRef<HTMLElement>(null)

const refBinding = ref ?? fallbackRef

const defaultLayoutId = React.useId()

const { activeLocale, setLocale } = useLocaleInfo()

const componentViewport = useComponentViewport()

const { style, className, layoutId, variant, Ln8d5mN1s, f8fgdu9JL, ...restProps } = getProps(props)

const {baseVariant, classNames, clearLoadingGesture, gestureHandlers, gestureVariant, isLoading, setGestureState, setVariant, variants} = useVariantState({cycleOrder, defaultVariant: "fg2Qm7JpU", ref: refBinding, variant, variantClassNames})

const layoutDependency = createLayoutDependency(props, variants)

const { activeVariantCallback, delay } = useActiveVariantCallback(baseVariant)

const onTapalztq6 = activeVariantCallback(async (...args) => {
setGestureState({isPressed: false})
if (f8fgdu9JL) {const res = await f8fgdu9JL(...args);
if (res === false) return false;}
})

const sharedStyleClassNames = []

const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames)

const isDisplayed = () => {
if (baseVariant === "KTyV7Phkk") return false
return true
}

return (<LayoutGroup id={layoutId ?? defaultLayoutId}><Variants animate={variants} initial={false}><Transition value={transition1}><motion.div {...restProps} {...gestureHandlers} className={cx(scopingClassNames, "framer-12waq4g", className, classNames)} data-framer-name={"L"} data-highlight layoutDependency={layoutDependency} layoutId={"fg2Qm7JpU"} onTap={onTapalztq6} ref={refBinding} style={{backgroundColor: "rgba(0, 0, 0, 0)", borderBottomLeftRadius: 0, borderBottomRightRadius: 0, borderTopLeftRadius: 0, borderTopRightRadius: 0, ...style}} variants={{KTyV7Phkk: {backgroundColor: "var(--token-fb12e452-5cc0-4bf6-a721-de659eb1ddc7, rgb(245, 244, 243))", borderBottomLeftRadius: 10, borderBottomRightRadius: 10, borderTopLeftRadius: 10, borderTopRightRadius: 10}}} {...addPropertyOverrides({KTyV7Phkk: {"data-framer-name": "S"}}, baseVariant, gestureVariant)}><Image background={{alt: "", fit: "fit", loading: getLoadingLazyAtYPosition(((componentViewport?.y || 0) + (0 + ((((componentViewport?.height || 180) - 0) - 175) / 2)))), pixelHeight: 2560, pixelWidth: 2560, sizes: "264px", ...toResponsiveImage(Ln8d5mN1s), ...{ positionX: "center", positionY: "center" }}} className={"framer-1hrlcan"} layoutDependency={layoutDependency} layoutId={"cPNYTsnmH"}/>{isDisplayed() && (<motion.div className={"framer-i8r105"} data-framer-name={"Line"} layoutDependency={layoutDependency} layoutId={"UKp9GKW_B"} style={{backgroundColor: "var(--token-bf3b78f1-7c89-4ecd-bba4-77c1a4c7b347, rgb(234, 234, 234))", opacity: 0.65}}/>)}</motion.div></Transition></Variants></LayoutGroup>)

});

const css = ["@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }", ".framer-hJ2mp.framer-17xb6gr, .framer-hJ2mp .framer-17xb6gr { display: block; }", ".framer-hJ2mp.framer-12waq4g { align-content: center; align-items: center; cursor: pointer; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: 180px; justify-content: center; padding: 0px; position: relative; width: 268px; }", ".framer-hJ2mp .framer-1hrlcan { flex: none; height: 175px; overflow: hidden; position: relative; width: 264px; }", ".framer-hJ2mp .framer-i8r105 { flex: none; height: 100%; position: absolute; right: 0px; top: calc(50.00000000000002% - 100% / 2); width: 1px; z-index: 1; }"]

/**
 * This is a generated Framer component.
 * @framerIntrinsicHeight 180
 * @framerIntrinsicWidth 268
 * @framerCanvasComponentVariantDetails {"propertyName":"variant","data":{"default":{"layout":["fixed","fixed"]},"KTyV7Phkk":{"layout":["fixed","fixed"]}}}
 * @framerVariables {"Ln8d5mN1s":"image","f8fgdu9JL":"click"}
 * @framerImmutableVariables true
 * @framerDisplayContentsDiv false
 * @framerAutoSizeImages true
 * @framerComponentViewportWidth true
 * @framerColorSyntax true
 */
const FramerAUdIPWa8L: React.ComponentType<Props> = withCSS(Component, css, "framer-hJ2mp") as typeof Component;
export default FramerAUdIPWa8L;

FramerAUdIPWa8L.displayName = "Client Card XL";

FramerAUdIPWa8L.defaultProps = {height: 180, width: 268};

addPropertyControls(FramerAUdIPWa8L, {variant: {options: ["fg2Qm7JpU", "KTyV7Phkk"], optionTitles: ["L", "S"], title: "Variant", type: ControlType.Enum}, Ln8d5mN1s: {__defaultAssetReference: "data:framer/asset-reference,nvwMzGj6it9ES02wDvpqv67cBa0.jpg?originalFilename=LEGENDER-Tricko-biele-scaled.jpg&width=2560&height=2560", title: "Image", type: ControlType.ResponsiveImage}, f8fgdu9JL: {title: "Click", type: ControlType.EventHandler}} as any)

addFonts(FramerAUdIPWa8L, [{explicitInter: true, fonts: []}], {supportsExplicitInterCodegen: true})