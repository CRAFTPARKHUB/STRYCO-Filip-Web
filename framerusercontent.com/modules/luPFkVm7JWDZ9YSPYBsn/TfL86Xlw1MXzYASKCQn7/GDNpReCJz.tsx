// Generated by Framer (6807895)

import { addFonts, cx, CycleVariantState, SVG, useComponentViewport, useLocaleInfo, useVariantState, withCSS } from "framer";
import { LayoutGroup, motion, MotionConfigContext } from "framer-motion";
import * as React from "react";

const serializationHash = "framer-BHJnP"

const variantClassNames = {parz3JfAO: "framer-v-1lciyqh"};

function addPropertyOverrides(overrides, ...variants) {
const nextOverrides = {}
variants?.forEach(variant => variant && Object.assign(nextOverrides, overrides[variant]))
return nextOverrides
}

const transition1 = {bounce: 0.2, delay: 0, duration: 0.4, type: "spring"}

const Transition = ({value, children}) => {
const config = React.useContext(MotionConfigContext)
const transition = value ?? config.transition
const contextValue = React.useMemo(() => ({ ...config, transition }), [JSON.stringify(transition)])
return <MotionConfigContext.Provider value={contextValue}>{children}</MotionConfigContext.Provider>
}

const Variants = motion.create(React.Fragment)

const getProps = ({height, id, width, ...props}) => { return {...props} }

const createLayoutDependency = (props, variants) => {if (props.layoutDependency) return variants.join('-') + props.layoutDependency
return variants.join('-')}

export interface Props extends React.HTMLAttributes<HTMLDivElement> { style?: Record<string, unknown>;className?: string;layoutId?: string | number; }

const Component = React.forwardRef<HTMLDivElement, Props>(function(props, ref) {

const { activeLocale, setLocale } = useLocaleInfo()

const {style, className, layoutId, variant, ...restProps} = getProps(props)

const {baseVariant, classNames, clearLoadingGesture, gestureHandlers, gestureVariant, isLoading, setGestureState, setVariant, variants} = useVariantState({defaultVariant: "parz3JfAO", variant, variantClassNames})

const layoutDependency = createLayoutDependency(props, variants)

const sharedStyleClassNames = []

const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames)

const ref1 = React.useRef<HTMLElement>(null)

const defaultLayoutId = React.useId()

const componentViewport = useComponentViewport()

return (<LayoutGroup id={layoutId ?? defaultLayoutId}><Variants animate={variants} initial={false}><Transition value={transition1}><motion.div {...restProps} {...gestureHandlers} className={cx(scopingClassNames, "framer-1lciyqh", className, classNames)} data-framer-name={"Primary"} layoutDependency={layoutDependency} layoutId={"parz3JfAO"} ref={ref ?? ref1} style={{...style}}><SVG className={"framer-177u6pg"} data-framer-name={"Arrow Down"} layout={"position"} layoutDependency={layoutDependency} layoutId={"JZsP4X1Ba"} opacity={1} svg={"<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 31 30\"><path d=\"M 14.031 19.808 L 14.031 4.746 L 16.969 4.746 L 16.969 19.808 L 24.033 12.972 L 26.096 15 L 15.5 25.254 L 4.904 15 L 6.967 12.972 Z\" fill=\"var(--token-fe9d93ed-b3f8-4dd5-a542-7dee2ff95478, rgb(249, 249, 249)) /* {&quot;name&quot;:&quot;White&quot;} */\"></path></svg>"} svgContentId={10004993011} withExternalLayout/></motion.div></Transition></Variants></LayoutGroup>)

});

const css = ["@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }", ".framer-BHJnP.framer-10ababa, .framer-BHJnP .framer-10ababa { display: block; }", ".framer-BHJnP.framer-1lciyqh { align-content: center; align-items: center; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: min-content; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: min-content; }", ".framer-BHJnP .framer-177u6pg { flex: none; height: 30px; position: relative; width: 31px; }", "@supports (background: -webkit-named-image(i)) and (not (font-palette:dark)) { .framer-BHJnP.framer-1lciyqh { gap: 0px; } .framer-BHJnP.framer-1lciyqh > * { margin: 0px; margin-left: calc(10px / 2); margin-right: calc(10px / 2); } .framer-BHJnP.framer-1lciyqh > :first-child { margin-left: 0px; } .framer-BHJnP.framer-1lciyqh > :last-child { margin-right: 0px; } }"]

/**
 * This is a generated Framer component.
 * @framerIntrinsicHeight 30
 * @framerIntrinsicWidth 31
 * @framerCanvasComponentVariantDetails {"propertyName":"variant","data":{"default":{"layout":["auto","auto"]}}}
 * @framerImmutableVariables true
 * @framerDisplayContentsDiv false
 * @framerComponentViewportWidth true
 */
const FramerGDNpReCJz: React.ComponentType<Props> = withCSS(Component, css, "framer-BHJnP") as typeof Component;
export default FramerGDNpReCJz;

FramerGDNpReCJz.displayName = "Scroll Down Arrow";

FramerGDNpReCJz.defaultProps = {height: 30, width: 31};

addFonts(FramerGDNpReCJz, [{explicitInter: true, fonts: []}], {supportsExplicitInterCodegen: true})