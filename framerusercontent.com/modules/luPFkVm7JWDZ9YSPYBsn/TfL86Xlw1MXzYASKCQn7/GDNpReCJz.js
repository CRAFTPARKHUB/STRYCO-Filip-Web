// Generated by Framer (6807895)
import {
    jsx as _jsx
} from "react/jsx-runtime";
import {
    addFonts,
    cx,
    SVG,
    useComponentViewport,
    useLocaleInfo,
    useVariantState,
    withCSS
} from "framer";
import {
    LayoutGroup,
    motion,
    MotionConfigContext
} from "framer-motion";
import * as React from "react";
const serializationHash = "framer-BHJnP";
const variantClassNames = {
    parz3JfAO: "framer-v-1lciyqh"
};

function addPropertyOverrides(overrides, ...variants) {
    const nextOverrides = {};
    variants ? .forEach(variant => variant && Object.assign(nextOverrides, overrides[variant]));
    return nextOverrides;
}
const transition1 = {
    bounce: .2,
    delay: 0,
    duration: .4,
    type: "spring"
};
const Transition = ({
    value,
    children
}) => {
    const config = React.useContext(MotionConfigContext);
    const transition = value ? ? config.transition;
    const contextValue = React.useMemo(() => ({ ...config,
        transition
    }), [JSON.stringify(transition)]);
    return /*#__PURE__*/ _jsx(MotionConfigContext.Provider, {
        value: contextValue,
        children: children
    });
};
const Variants = motion.create(React.Fragment);
const getProps = ({
    height,
    id,
    width,
    ...props
}) => {
    return { ...props
    };
};
const createLayoutDependency = (props, variants) => {
    if (props.layoutDependency) return variants.join("-") + props.layoutDependency;
    return variants.join("-");
};
const Component = /*#__PURE__*/ React.forwardRef(function(props, ref) {
    const {
        activeLocale,
        setLocale
    } = useLocaleInfo();
    const {
        style,
        className,
        layoutId,
        variant,
        ...restProps
    } = getProps(props);
    const {
        baseVariant,
        classNames,
        clearLoadingGesture,
        gestureHandlers,
        gestureVariant,
        isLoading,
        setGestureState,
        setVariant,
        variants
    } = useVariantState({
        defaultVariant: "parz3JfAO",
        variant,
        variantClassNames
    });
    const layoutDependency = createLayoutDependency(props, variants);
    const sharedStyleClassNames = [];
    const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
    const ref1 = React.useRef(null);
    const defaultLayoutId = React.useId();
    const componentViewport = useComponentViewport();
    return /*#__PURE__*/ _jsx(LayoutGroup, {
        id: layoutId ? ? defaultLayoutId,
        children: /*#__PURE__*/ _jsx(Variants, {
            animate: variants,
            initial: false,
            children: /*#__PURE__*/ _jsx(Transition, {
                value: transition1,
                children: /*#__PURE__*/ _jsx(motion.div, { ...restProps,
                    ...gestureHandlers,
                    className: cx(scopingClassNames, "framer-1lciyqh", className, classNames),
                    "data-framer-name": "Primary",
                    layoutDependency: layoutDependency,
                    layoutId: "parz3JfAO",
                    ref: ref ? ? ref1,
                    style: { ...style
                    },
                    children: /*#__PURE__*/ _jsx(SVG, {
                        className: "framer-177u6pg",
                        "data-framer-name": "Arrow Down",
                        layout: "position",
                        layoutDependency: layoutDependency,
                        layoutId: "JZsP4X1Ba",
                        opacity: 1,
                        svg: '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 31 30"><path d="M 14.031 19.808 L 14.031 4.746 L 16.969 4.746 L 16.969 19.808 L 24.033 12.972 L 26.096 15 L 15.5 25.254 L 4.904 15 L 6.967 12.972 Z" fill="var(--token-fe9d93ed-b3f8-4dd5-a542-7dee2ff95478, rgb(249, 249, 249)) /* {&quot;name&quot;:&quot;White&quot;} */"></path></svg>',
                        svgContentId: 10004993011,
                        withExternalLayout: true
                    })
                })
            })
        })
    });
});
const css = ["@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }", ".framer-BHJnP.framer-10ababa, .framer-BHJnP .framer-10ababa { display: block; }", ".framer-BHJnP.framer-1lciyqh { align-content: center; align-items: center; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: min-content; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: min-content; }", ".framer-BHJnP .framer-177u6pg { flex: none; height: 30px; position: relative; width: 31px; }", "@supports (background: -webkit-named-image(i)) and (not (font-palette:dark)) { .framer-BHJnP.framer-1lciyqh { gap: 0px; } .framer-BHJnP.framer-1lciyqh > * { margin: 0px; margin-left: calc(10px / 2); margin-right: calc(10px / 2); } .framer-BHJnP.framer-1lciyqh > :first-child { margin-left: 0px; } .framer-BHJnP.framer-1lciyqh > :last-child { margin-right: 0px; } }"];
/**
 * This is a generated Framer component.
 * @framerIntrinsicHeight 30
 * @framerIntrinsicWidth 31
 * @framerCanvasComponentVariantDetails {"propertyName":"variant","data":{"default":{"layout":["auto","auto"]}}}
 * @framerImmutableVariables true
 * @framerDisplayContentsDiv false
 * @framerComponentViewportWidth true
 */
const FramerGDNpReCJz = withCSS(Component, css, "framer-BHJnP");
export default FramerGDNpReCJz;
FramerGDNpReCJz.displayName = "Scroll Down Arrow";
FramerGDNpReCJz.defaultProps = {
    height: 30,
    width: 31
};
addFonts(FramerGDNpReCJz, [{
    explicitInter: true,
    fonts: []
}], {
    supportsExplicitInterCodegen: true
});
export const __FramerMetadata__ = {
    "exports": {
        "Props": {
            "type": "tsType",
            "annotations": {
                "framerContractVersion": "1"
            }
        },
        "default": {
            "type": "reactComponent",
            "name": "FramerGDNpReCJz",
            "slots": [],
            "annotations": {
                "framerCanvasComponentVariantDetails": "{\"propertyName\":\"variant\",\"data\":{\"default\":{\"layout\":[\"auto\",\"auto\"]}}}",
                "framerIntrinsicWidth": "31",
                "framerImmutableVariables": "true",
                "framerDisplayContentsDiv": "false",
                "framerIntrinsicHeight": "30",
                "framerContractVersion": "1",
                "framerComponentViewportWidth": "true"
            }
        },
        "__FramerMetadata__": {
            "type": "variable"
        }
    }
}
//# sourceMappingURL=./GDNpReCJz.map