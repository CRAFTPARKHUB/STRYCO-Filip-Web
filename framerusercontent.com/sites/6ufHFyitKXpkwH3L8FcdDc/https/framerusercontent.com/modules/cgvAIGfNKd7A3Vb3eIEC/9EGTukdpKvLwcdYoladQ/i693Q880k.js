// Generated by Framer (2ac8f15)
import {
    jsx as _jsx
} from "react/jsx-runtime";
import {
    addFonts,
    cx,
    Link,
    useActiveVariantCallback,
    useComponentViewport,
    useLocaleInfo,
    useVariantState,
    withCSS
} from "framer";
import {
    LayoutGroup,
    motion,
    MotionConfigContext
} from "framer-motion";
import * as React from "react";
import {
    useRef
} from "react";
const serializationHash = "framer-OQBhz";
const variantClassNames = {
    Mx1Q4stCW: "framer-v-8a5ygn"
};

function addPropertyOverrides(overrides, ...variants) {
    const nextOverrides = {};
    variants ? .forEach(variant => variant && Object.assign(nextOverrides, overrides[variant]));
    return nextOverrides;
}
const transition1 = {
    damping: 40,
    delay: 0,
    mass: 1,
    stiffness: 500,
    type: "spring"
};
const Transition = ({
    value,
    children
}) => {
    const config = React.useContext(MotionConfigContext);
    const transition = value ? ? config.transition;
    const contextValue = React.useMemo(() => ({ ...config,
        transition
    }), [JSON.stringify(transition)]);
    return /*#__PURE__*/ _jsx(MotionConfigContext.Provider, {
        value: contextValue,
        children: children
    });
};
const Variants = motion.create(React.Fragment);
const getProps = ({
    height,
    id,
    width,
    ...props
}) => {
    return { ...props
    };
};
const createLayoutDependency = (props, variants) => {
    if (props.layoutDependency) return variants.join("-") + props.layoutDependency;
    return variants.join("-");
};
const Component = /*#__PURE__*/ React.forwardRef(function(props, ref) {
    const fallbackRef = useRef(null);
    const refBinding = ref ? ? fallbackRef;
    const defaultLayoutId = React.useId();
    const {
        activeLocale,
        setLocale
    } = useLocaleInfo();
    const componentViewport = useComponentViewport();
    const {
        style,
        className,
        layoutId,
        variant,
        ...restProps
    } = getProps(props);
    const {
        baseVariant,
        classNames,
        clearLoadingGesture,
        gestureHandlers,
        gestureVariant,
        isLoading,
        setGestureState,
        setVariant,
        variants
    } = useVariantState({
        defaultVariant: "Mx1Q4stCW",
        ref: refBinding,
        variant,
        variantClassNames
    });
    const layoutDependency = createLayoutDependency(props, variants);
    const {
        activeVariantCallback,
        delay
    } = useActiveVariantCallback(baseVariant);
    const onTapmb8nuo = activeVariantCallback(async (...args) => {
        setGestureState({
            isPressed: false
        });
        setVariant("Mx1Q4stCW");
    });
    const sharedStyleClassNames = [];
    const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
    return /*#__PURE__*/ _jsx(LayoutGroup, {
        id: layoutId ? ? defaultLayoutId,
        children: /*#__PURE__*/ _jsx(Variants, {
            animate: variants,
            initial: false,
            children: /*#__PURE__*/ _jsx(Transition, {
                value: transition1,
                children: /*#__PURE__*/ _jsx(Link, {
                    href: "https://framer.com/projects/new?duplicate=YWgxCMMYLB2BIX1yCmQl&via=westhill97",
                    motionChild: true,
                    nodeId: "Mx1Q4stCW",
                    openInNewTab: true,
                    scopeId: "i693Q880k",
                    children: /*#__PURE__*/ _jsx(motion.a, { ...restProps,
                        ...gestureHandlers,
                        className: `${cx(scopingClassNames,"framer-8a5ygn",className,classNames)} framer-lorwgb`,
                        "data-framer-name": "Primary",
                        "data-highlight": true,
                        layoutDependency: layoutDependency,
                        layoutId: "Mx1Q4stCW",
                        onTap: onTapmb8nuo,
                        ref: refBinding,
                        style: {
                            borderBottomLeftRadius: 10,
                            borderBottomRightRadius: 10,
                            borderTopLeftRadius: 10,
                            borderTopRightRadius: 10,
                            boxShadow: "0px 4px 6px 0px rgba(0, 0, 0, 0.25)",
                            ...style
                        }
                    })
                })
            })
        })
    });
});
const css = ["@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }", ".framer-OQBhz.framer-lorwgb, .framer-OQBhz .framer-lorwgb { display: block; }", ".framer-OQBhz.framer-8a5ygn { align-content: center; align-items: center; cursor: pointer; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: 40px; justify-content: center; overflow: hidden; padding: 0px; position: relative; text-decoration: none; width: 142px; will-change: var(--framer-will-change-override, transform); }"];
/**
 * This is a generated Framer component.
 * @framerIntrinsicHeight 40
 * @framerIntrinsicWidth 142
 * @framerCanvasComponentVariantDetails {"propertyName":"variant","data":{"default":{"layout":["fixed","fixed"]}}}
 * @framerImmutableVariables true
 * @framerDisplayContentsDiv false
 * @framerAutoSizeImages true
 * @framerComponentViewportWidth true
 * @framerColorSyntax true
 */
const Frameri693Q880k = withCSS(Component, css, "framer-OQBhz");
export default Frameri693Q880k;
Frameri693Q880k.displayName = "Get Template Button";
Frameri693Q880k.defaultProps = {
    height: 40,
    width: 142
};
addFonts(Frameri693Q880k, [{
    explicitInter: true,
    fonts: []
}], {
    supportsExplicitInterCodegen: true
});
export const __FramerMetadata__ = {
    "exports": {
        "default": {
            "type": "reactComponent",
            "name": "Frameri693Q880k",
            "slots": [],
            "annotations": {
                "framerContractVersion": "1",
                "framerAutoSizeImages": "true",
                "framerIntrinsicWidth": "142",
                "framerComponentViewportWidth": "true",
                "framerIntrinsicHeight": "40",
                "framerDisplayContentsDiv": "false",
                "framerColorSyntax": "true",
                "framerCanvasComponentVariantDetails": "{\"propertyName\":\"variant\",\"data\":{\"default\":{\"layout\":[\"fixed\",\"fixed\"]}}}",
                "framerImmutableVariables": "true"
            }
        },
        "Props": {
            "type": "tsType",
            "annotations": {
                "framerContractVersion": "1"
            }
        },
        "__FramerMetadata__": {
            "type": "variable"
        }
    }
}
//# sourceMappingURL=./i693Q880k.map